name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  packages: read
  repository-projects: read
  actions: read

jobs:
  test:
    permissions:
      contents: read
      actions: read
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: github_crawler_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 1
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Set up environment
      run: |
        echo "PYTHONPATH=${{ github.workspace }}" >> $GITHUB_ENV
        echo "Running in directory: $(pwd)"
        echo "Workspace: ${{ github.workspace }}"
        ls -la
        
    - name: Create test config
      run: |
        cat > src/config.py << EOL
        from pydantic_settings import BaseSettings
        from pydantic import Field, ConfigDict
        from dotenv import load_dotenv
        from functools import lru_cache
        import os

        def reload_env():
            """Reload environment variables from .env file"""
            load_dotenv(override=True)

        class Settings(BaseSettings):
            model_config = ConfigDict(extra='ignore')

            # GitHub Configuration
            github_token: str = Field(
                default=os.environ.get('GITHUB_TOKEN', ''),
                description="GitHub API token for authentication"
            )
            github_api_url: str = Field(
                default="https://api.github.com/graphql",
                description="GitHub GraphQL API endpoint"
            )

            # Database Configuration
            db_host: str = Field(default="localhost", description="Database host")
            db_port: int = Field(default=5432, description="Database port")
            db_name: str = Field(default="github_crawler_test", description="Database name")
            db_user: str = Field(default="postgres", description="Database user")
            db_password: str = Field(default="postgres", description="Database password")

            # Test-specific settings
            batch_size: int = Field(default=5, ge=1, le=100)
            max_retries: int = Field(default=3, ge=1)
            total_num_repo: int = Field(default=100, ge=1)
            default_min_stars: int = Field(default=100, ge=0)
            default_start_year: int = Field(default=2024, ge=2008, le=2025)
            default_start_month: int = Field(default=1, ge=1, le=12)
            default_partition_threshold: int = Field(default=100, gt=0, le=1000)

            @property
            def database_url(self) -> str:
                return f"postgresql://{self.db_user}:{self.db_password}@{self.db_host}:{self.db_port}/{self.db_name}"

            @property
            def github_graphql_url(self) -> str:
                """Ensure we're always using the GraphQL endpoint"""
                return "https://api.github.com/graphql"

        @lru_cache()
        def get_settings():
            return Settings()

        def get_fresh_settings():
            get_settings.cache_clear()
            reload_env()
            return get_settings()

        settings = get_fresh_settings()
        EOL
        
    - name: Initialize database
      run: |
        python -c "import sys; print(sys.path)"
        python src/init_db.py
        
    - name: Run tests
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        python -c "import sys; print(sys.path)"
        python -m pytest tests/ -v
        
    - name: Test crawler (single mode)
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        echo "Testing GitHub token and API access..."
        curl -H "Authorization: Bearer ${{ github.token }}" https://api.github.com/graphql -d '{"query":"query { viewer { login }}"}'
        echo "\nRunning crawler..."
        python src/crawler.py --mode single --language python --batch-size 100 --total-num-repo 2000 --num-threads 2
    - name: Test crawler (pipeline mode)
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        python src/crawler.py --mode pipeline --language python --batch-size 100 --total-num-repo 2000 --num-threads 2
        
    # - name: Lint code
    #   run: |
    #     pip install flake8
    #     flake8 src/ tests/ --max-line-length=100 --extend-ignore=E203

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Run security scan
      uses: github/codeql-action/init@v2
      with:
        languages: python
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2 